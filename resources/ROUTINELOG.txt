possibly easy routines
$00:9942
$00:AC91 - probably some sort of math? - look after at vram stuff and find locations
$00:BBF4
$00:C634 - text related?
$00:CC7B - characters??
$00:CCE5 - might add up defense at some point??
$00:CD8C - stats something??
a lot of stat related routines in $00:CXXX-DXXX area
$00:D3FB
$00:D41F - something with hp
$00:D95C

break point stats to see where their values are
$00:D9FF - text of some kind?
$00:F5C1

$01:81D7 - weird BIT test

$00:8E40	{ A, X, Y }
	$0E80 = A 
	$0E82 = X
	$0E84 = Y

	call 008E49

$00:8E49
	a1 = $0E80[32 bits]
	a2 = $0E84[16 bits]
	t1 = 0x0000

	bit = a1>> 31

	32 times:
		t1 = t1<<1
		t1 += bit

		if t1 >= a2 then
			bit = 1
			t1 = t1 - a2
		else
			bit = 0

		a1 = a1<<1
		a1 += bit
		bit = a1 >> 31

	return t1

$00:8E71
	t1 = $0E86
	t2 = $0E84

	if t1*2 < t2 then
		$0E80[4] ++
	endif

	A = $0E80[2]
	X = $0E82[2]

$00:9134
	$0E8C = A
	$0EA8 = Y
	$0EB6 = Y
	$0EC4 = X
	$0E9A = 0x0000

$00:9643
	$0ED9 <<= 1

	if $0ED7 == 0
	or if $0ED7 >= 3 then
		$0ED9 ++
	endif

	$0ED7 << 1 + carry (ROL)

	t1 = $0ED7 + 0x22 + $0ED9 + carry
	t1 = t1 xor 0x5A

	$0ED8 = t1 + $0ED8 + carry
	$0ED5 |= $0ED8

$00:ADCA
	if $0400[2] is positive
		If bit 6 of $07C0+$1F is set
			if bits 12 and 13 of $0F31 are reset
				if $045E[2] is negative then
					call AE49
			if bit 12 is reset
				if $045E[2] is positive then
					$0460 = (self + 1) & 0x0007
					if $0460 == 4 then
						$0462[2] = 0x0001
						$0464[2] = 0x0010
				else
					if $0460 == 4 then
						call AFBB (always this routine from indirect jump)

			else
				$045E[2] = -$045E
				if $045E is negative
					call AE49
				else
					$0F0E = $0F0D = $0F0D & 0xF7
		
		

	else if $0400[2] is negative
		$7E:FFFE[2] = $FFFF
		reset memory
		return


	call 1900vector updater

$00:AE49
	input: $0460
	if $00:
		

$00:B4E1 UpdatePlayerStats
	Argument X: Thing to search for (TXA)
	What is Y indexing?

$00:B529 UpdateHP
	A = STR/2 + STM
	Y = 4 or 5 if X=0x60 (2nd char?)

	t1 = A/Y
	correct remainder into t1
	t1 * 

	$0E80++

$00:B892
	Input: A
	X = A>>3
	Y = A&7
	Check bit Y of $07C0,X
	Return with carry of ~bit

$00:BB1C
	Input: A
	Y = 6 * A
	b = Which bit is on at DBD5+Y
	X = 0x10 * b
	X = DMA channel
	X = 4*b
	save to group X of $0F0F
	enable bit in $0F0E

$02:8ECA
	if $0A71 == -1 then
		return

	$0A72--
	if $0A72 == 0 then
		return

	$0A73++
	if $0A73 == $0A74 then
		$0A73 = 0

	X = $0A73
	$0A72 = $0A79,X
	X = $0A75,X
	A = $0A75
	call 0F9AFA


$03:82C2
	Y = $0A26
	$C0[3] = start of banks 8,9,A,B

	Y=$0A24 * 2

	LDA [$C0],Y
	STA $C0

	Y=$0A22 * 2
	LDA [$C0],Y


$03:83A5
	$0980[2] = $0A2F[2]
	$0A2F += ($0A1C & 0x00FF)<<5
	$0A33 = 0

	loop:
		$0A2D = A = [$C0]
		$C0[2]++
		if A < 0xD0 then
			routine $03:8519:
				if $0A33 == 0x40 then
					return

				if A == 0xCF or A < 0x9C then // basic characters
					X = $0A33
					$0900,X = A
					$0940,X = 0xCF

					$0901,X = $0A2C
					$0941,X = $0A2C

					$0A33 += 2

				else
					if A >= 0x9C and A < 0xB5 then // basic characters with an accent
						Y = A-0x9C
						A = $03:8596,Y (values in the range of 0x2A to 0x42)
					else if A == 0xCE then
						Y = 0x00
						A = 0x5F
					else
						Y = A - 0xB5
						A = $03:85AF,Y (values in the range of 0x62 to 0x7A)
					endif

					X = $0A33
					$0900,X = A

					if Y >= 0x14 then
						$0940,X = 0x9F // ยบ accent
					else
						$0940,X = 0x9E // " accent
					endif

					$0901,X = $0A2C
					$0941,X = $0A2C

					$0A33 += 2
				endif
			endroutine
		else if A >= 0xD0 then
			Y = $0A3C
			X = ( (A-0xD0) * 2 ) + $03:8421,Y
			jump to routine at $03:8425,X


TextCommands - $03:8425
	TextCommand_00 - $03:85FD	{ 0xD0, p1 }
		b = p1 & 0x07
		X = p1 >> 3
		Set bit b in $07C0,X

	TextCommand_01 - $03:8631	{ 0xD1, p1 }
		b = p1 & 0x07
		X = p1 >> 3
		Unset bit b in $07C0,X

	TextCommand_5C { 0xFC, p1, p2 }
	TextCommand_02 - $03:8653	{ 0xD2, p1, p2 }
		Get next byte of text
		b = byte & 0x07
		X = byte >> 3
		if bit b in $07C0,X is set
			call RelocateTextPointer(p2)

	TextCommand_49 { 0xE9, p1 }
	TextCommand_03 - $03:8669	{ 0xD3, p1 }
		call RelocateTextPointer(p1)

	TextCommand_04 - $03:8674	ANALYZE MORE
		Get next byte

	TextCommand_4A { 0xEA, p1 }
	TextCommand_05 - $03:86A6	{ 0xD5, p1 }
		write p1 to APU (transfers possible)

		if p1 < 0x38 then
			do nothing
		else if p1 < 0x44 then
			$0EFE = 0xFF
		else
			$05BA = 0xFF
		endif

	TextCommand_06 - $03:86C6	{ 0xD6, p1, p2, p3, p4 } ANALYZE MORE
		$0A6A = p1
		$0A69 = p2
		if p2 != 0 then
			$0A6B = p3
			$0A6D = p4
		endif

		routine02E6C9
		X = ( ( ($0A6A & 0x7) << 1 ) + 0x10 ) << 1
		A = $0A69 & 0x00FF

	TextCommand_07 - $03:86E9	{ 0xD7, p1, p2 } ANALYZE MORE
		$0CF3 = 0x00
		$0CF4 = 0x00
		$0A71 = 0xFF
		$0A59 = p1
		if p1 == 0x00 then
			call 0F939C

		elseif p1 < 0x80 then
			call 02E32D

		elseif p1 >= 0x80
			$0A59 = p1 & 0x7F
			$0A5B = p2
			call 0FA05F_VRAMDMAs

	TextCommand_08 - $03:8721 ANALYZE MORE
		Call some text parser wrapper (exits if $0A33 is 0)

	TextCommand_09 - $03:88D9	{ 0xD9, p1, p2, p3, p4 }
		$0E00[4] = 32-bit number of (ss | p3<<16 | p2<<8 | p1<<0)
		ss = p3 sign extended

		if $0E00[4]:8..15 < $0405[4]:8..15 then // comparing middle bytes
			if $0E00 > $0405 then // compare bottom bytes
				RelocateTextPointer(p4)

	TextCommand_0A - $03:88F9	{ 0xDA, p1, p2, p3 } ANALYZE MORE
		$0E00[4] = 32-bit number of (ss | p3<<16 | p2<<8 | p1<<0)
		ss = p3 sign extended

		$0405[4] += $0E00[4]
		do something $0405

	TextCommand_0B - $03:893D	{ 0xDB, p1, p2, p3, p4 }
		$0E00[4] = 32-bit number of (ss | p3<<16 | p2<<8 | p1<<0)
		ss = p3 sign extended

		if $0E00[4]:8..15 < $0409[4]:8..15 then // comparing middle bytes
			if $0E00 > $0409 then // compare bottom bytes
				RelocateTextPointer(p4)

	TextCommand_0C - $03:895F	{ 0xDC, p1, p2, p3 } ANALYZE MORE
		$0E00[4] = 32-bit number of (ss | p3<<16 | p2<<8 | p1<<0)
		ss = p3 sign extended

		$0409[4] += $0E00[4]
		call MakeRange100kand1M to make $0409 between 0 and 999,999
	

	TextCommand_0D - $03:897C	{ 0xDD, p1, p2 } ANALYZE MORE
		match_found = Find_A_In_078X(p1)
		if match_found then
			RelocateTextPointer(p2)
		endif

	TextCommand_0E - $03:8992	{ 0xDE, p1, p2, p3, p4 } ANALYZE MORE
		$050B = p1
		$0BEE = p1

		p2 discarded?

		$050A = p3
		$0BED = p3

		t1 = SetBF3BF9fromBFDpA(0x00)
		$0506 = t1
		$0BF3 = t1

		$050E = p4
		$0524 = 0x00

	TextCommand_0F - $03:89BE	{ 0xDF } ANALYZE MORE


	TextCommand_10 - $03:89CA	{ 0xE0, p1 }
		$0A52 = p1

	TextCommand_11 - $03:89D3	{ 0xE1, p1 }
		$0A50 = p1
		$0A51 = 0x00

	TextCommand_12 - $03:89DF	{ 0xE2, p1 } ANALYZE MORE
		call TextCommand_29

	TextCommand_13 - $03:8DB9	{ 0xE3 } ANALYZE MORE


	TextCommand_14 - $03:8EE5	{ 0xE4, p1 } ANALYZE MORE
		call 01E2FA(p1<<1)

	TextCommand_15 - $03:8EF0	{ 0xE5, p1 } ANALYZE MORE
		Jump table from p1

	TextCommand_16 - $03:8FC3	{ 0xE6, p1 } ANALYZE MORE
		p1 discarded?

	TextCommand_17 - $03:9001	{ 0xE7, p1 } ANALYZE MORE
		t1 = ( p1 & 0x01 ) << 1
		call 01E5CD(t1)

		$0524 = 0x00

	TextCommand_18 - $03:9014	{ 0xE8 } ANALYZE MORE


	TextCommand_19 - $03:901C	{ 0xE9, p1, p2 }
		X = p1
		t1 = $03:905A, X (some value 0x01 to 0x0F)

		X = 0
		for	start	Y=3; b=0; X=0x0000;
		while		Y >=0;
		after		Y--; b++; X+=0x60;
		do
			if bit b of t1 is set then
				if $1000,X == 0x0000
				or if $1002,X & 0xF640 != 0x0000 then
					RelocateTextPointer(p2)
					break;
			endif
		endfor

	TextCommand_1A - $03:9069	{ 0xEA ANALYZE MORE


	TextCommand_1B - $03:90C8	{ 0xEB, p1, p2, p3, p4 } ANALYZE MORE
		$050D = p1
		$0BEE = p1

		p2 discarded?

		$050C = p3
		$0BED = p3

		t1 = 03E705(0x00)
		$0508 = $0BF3

		$0510 = p4
		$0524 = 0xFFFF

	TextCommand_1C - $03:910B	{ 0xEC ANALYZE MORE


	TextCommand_1D - $03:9128	{ 0xED }
		WriteTextFrom410(0x01)

	TextCommand_1E - $03:9131	{ 0xEE }
		WriteTextFrom410(0x02)

	TextCommand_1F - $03:913E	{ 0xEF }
		WriteTextFrom410(0x03)

	TextCommand_58 { 0xF8 }
	TextCommand_20 - $03:9147	{ 0xF0 }
		WriteTextFrom410(0x00)

	TextCommand_21 - $03:9150	{ 0xF1 ANALYZE MORE

	TextCommand_4B { 0xEB }
	TextCommand_22 - $03:91B0	{ 0xF2 ANALYZE MORE

	TextCommand_4C { 0xEC }
	TextCommand_23 - $03:9218	{ 0xF3 }
		$0A39 = $0A50
		$C3[3] = $09:F577
		WriteTextIndexW0A39()

	TextCommand_24 - $03:9234	{ 0xF4 }
		$0A39 = $0A52
		$C3[3] = $09:F477
		WriteTextIndexW0A39()

	TextCommand_25 - $03:9250	{ 0xF5 }
		$0A39 = $050A
		if $050A >= 0x0100 then
			$C3[3] = $09:F3BD
		else
			$C3[3] = $09:F1BD
		endif
		WriteTextIndexW0A39()

	TextCommand_26 - $03:9279	{ 0xF6 }
		$0A39 = $0506
		$C3[3] = $09:F429
		WriteTextIndexW0A39()

	TextCommand_27 - $03:9295	{ 0xF7, p1, p2 } ANALYZE MORE
		$0E00 = p1
		$0E02 = p2
		t1 = 009643(p2)
		if t1 <= p1
			RelocateTextPointer(p2)

	TextCommand_4F { 0xEF }
	TextCommand_28 - $03:92E1	{ 0xF8 ANALYZE MORE


	TextCommand_50 { 0xF0 }
	TextCommand_29 - $03:93B4	{ 0xF9 ANALYZE MORE

	TextCommand_51 { 0xF1 }
	TextCommand_2A - $03:93FF	{ 0xFA ANALYZE MORE

	TextCommand_54 { 0xF4 }
	TextCommand_2B - $03:9419	{ 0xFB ANALYZE MORE

	TextCommand_53 { 0xF3 }
	TextCommand_2C - $03:9487	{ 0xFC ANALYZE MORE


	TextCommand_2D - $03:9517	{ 0xFD, p1 }
		$0A3B = p1

	TextCommand_2E - $03:9520	{ 0xFE ANALYZE MORE


	TextCommand_5F { 0xFF }
	TextCommand_2F - $03:9524	{ 0xFF ANALYZE MORE


	TextCommand_30 - $03:C5E4	{ 0xD0 ANALYZE MORE


	TextCommand_31 - $03:C644	{ 0xD1, p1, p2 } ANALYZE MORE
		$0E00 = p1
		$0E02 = p2

		if ($040F & 0xF0) == 0x80 then
			RelocateTextPointer(p1)
			return
		endif

		X = $0526
		old = $1004,X[2]

		for	start		X = 0x0180;
		while			X != 0x0600;
		after			X -= 0x0060
		do
			if $1000,X < 0x8000
			and if $1004,X == old then
					continue match;
				endif
		endif
		return

		match:
			RelocateTextPointer(p2)
			call 0F9C48(0x199A)

	TextCommand_32 - $03:C697	{ 0xD2 ANALYZE MORE


	TextCommand_33 - $03:D1F5	{ 0xD3 ANALYZE MORE


	TextCommand_34 - $03:C69D	{ 0xD4, p1, p2 } ANALYZE MORE
		Y = p1
		$0E00 = $03:C6C0,Y (single bits)
		t1 = 009643()
		if t1 < $0E00 then
			RelocateTextPointer(p2)
		endif

	TextCommand_35 - $03:C6C6	{ 0xD5 ANALYZE MORE


	TextCommand_36 - $03:C75D	{ 0xD6 ANALYZE MORE


	TextCommand_37 - $03:C79C	{ 0xD7 ANALYZE MORE


	TextCommand_38 - $03:C7D1	{ 0xD8 ANALYZE MORE


	TextCommand_39 - $03:C813	{ 0xD9 ANALYZE MORE


	TextCommand_3A - $03:9520	{ 0xDA ANALYZE MORE


	TextCommand_3B - $03:C83E	{ 0xDB ANALYZE MORE


	TextCommand_3C - $03:C89B	{ 0xDC ANALYZE MORE


	TextCommand_3D - $03:C8F8	{ 0xDD ANALYZE MORE


	TextCommand_3E - $03:CA31	{ 0xDE ANALYZE MORE


	TextCommand_3F - $03:CB34	{ 0xDF ANALYZE MORE


	TextCommand_40 - $03:CB4C	{ 0xE0 ANALYZE MORE


	TextCommand_41 - $03:CDFD	{ 0xE1, p1 }
		Y = p1 << 1
		X = $03:CE1F,Y (0, 1, or 2)
		$102E -= ($102E >> X)

	TextCommand_42 - $03:CE25	{ 0xE2 }
		for start		X = 0x0060;
		while			X != 0x0180;
		each			X += 0x0060;
		do
			if $1000,X != 0 then
				$1032,X -= ($1032,X >> 4)
			endif
		endfor

	TextCommand_43 - $03:CE4F	{ 0xE3 }
		$0409[4] -= ($0409[4] >> 4) // basically a 32bit int

	TextCommand_44 - $03:CE7D	{ 0xE4 }
		for start		X = 0x0060;
		while			X != 0x0180;
		each			X += 0x0060;
		do
			if $1000,X != 0 then
				$100C,X[4] -= ($100C,X[4] >> 4)
			endif
		endfor

	TextCommand_45 - $03:CEAB	{ 0xE5, p1 }
		sign extend p1

		$0A40 += p1

		if $0A40 is negative then
			$0A40 = 0x0000
		else if $0A40 >= 0x0020 then
			$0A40 = 0x0020
		endif

	TextCommand_46 - $03:CED5	{ 0xE6, p1 }
		sign extend p1

		$0A42 += p1

		if $0A42 is negative then
			$0A42 = 0x0000
		else if $0A42 >= 0x0020 then
			$0A42 = 0x0020
		endif

	TextCommand_47 - $03:CEFF	{ 0xE7 ANALYZE MORE


	TextCommand_48 - $03:CF27	{ 0xE8 ANALYZE MORE


	TextCommand_4D - $03:CFCD	{ 0xED }
		X = $0526
		$0A39 = $1004,X
		$C3[3] = $09:F1BD
		WriteTextIndexW0A39()


	TextCommand_4E - $03:CFE9	{ 0xEE }
		X = $0526
		$0A39 = $1006,X
		$C3[3] = $09:F429
		WriteTextIndexW0A39()

	TextCommand_55 - $03:BEC7	{ 0xF5, p1, p2 }
		$0A54 = p1
		$0A55 = p1
		$0A56 = 0x00
		$0A57 = 0x00

	TextCommand_56 - $03:D038	{ 0xF6 ANALYZE MORE


	TextCommand_57 - $03:AE4C	{ 0xF7 ANALYZE MORE


	TextCommand_59 - $03:D102	{ 0xF9, p1, p2 } ANALYZE MORE
		X = $0526
		t1 = $1018,X
		Y = p1
		t2 = 03C810,Y ( 0x07, 0x0F, 0x1F )
		t3 = 009643
		t1 += t3 & t2
		if $1018 < t1 then
			RelocateTextPointer(p2)
		endif

	TextCommand_5A - $03:D141	{ 0xFA ANALYZE MORE


	TextCommand_5B - $03:D1DE	{ 0xFB, p1, p2 } ANALYZE MORE
		if p1 == 0x00 then
			call 038636(p2)
		else
			SetBitIn07CX(p2)
		endif

	TextCommand_5D - $03:CCC2	{ 0xFD ANALYZE MORE
		Jump table based on $0A44

	TextCommand_5E - $03:D27D	{ 0xFE, p1 ANALYZE MORE
		$0A4C = p1





$03:891C
	$0E00 = SSCCAABB
	where A, B, C are next 3 bytes
	SS is sign extension of A
	so 0x00 if A is positive; 0xFF if A is negative

/*
 * TODO NOT SURE YET
 */
SetBF3BF9fromBFDpA:
$03:E705 { p1 }
	X = p1 << 1

	t1[2] = $0BED,X

	if t1 < 0x0100 then
		for start		X = 0x00;
		while			X != 0x24;
		after			X++;
		do
			if t1_low < 03E74C,X then
				t2 = X
				break
			endif
		endfor

		t2 = X

	else if t1 >= 0x0100 then
		X = t1 - 0x0100
		t2 = 03E770,X
	endif

	X = p1 << 1
	Y = t2
	t3 = 037A6, Y
	
	$0BF3,X = t2 // 16 bit write
	$0BF9,X = t3 // 16 bit write
	
/*
 * Look for A matching the bottom byte in array of 16 bit words
 * carry set = true
 * carry clear = false
 */
Find_A_In_078X
$0F:8498 { p1 }
	$0E00 = p1

	for start		X = 0x00;
	while			X != 0x3C;
	after			X += 2;
	do
		t1 = 16 bits at $0780,X
		if t1 >= 0x0100
		and if t1_low == p1 then
			return true
		endif
	endfor

	return false

$0F:8EED { p }
WriteTextFrom410:
	for start		Y = p << 3; X = 0x08;
	while			X > 0;
	after			Y++; X--;
	do
		t1 = $0410,Y
		if t1 == 0xFF then
			break
		else
			WriteNextMessageChar(t1)
		endif
	endfor

$0F:9AFA - 16ColorTransferF9AFA
	if $7E22FD != 0 then
		wait or something

	params:
		A = palette in cgram to write to
		X = set of palette data from 1CB000 to use

/*
 * Takes the 32 bit numbers at addresses
 * and trims them to a range
 * b1 at $0405 to 0-999,999 (broken though)
 * b2 at $0409 to 0-99,999
 */
MakeRange100kand1M
$0F:9F97
	so let's split this into:
	b1 - 32 bits at $0405
	b2 - 32 bits at $0409

	if b1 is negative then
		b1 = 0x0000 0000
	/*
	 * bad logic here
	 * unreachable code handles the bottom 16 bits
	 * but bcc and bcs make it skipped
	 * so 983,040 and above become 999,999
	 */
	else if b1 >= 0x000F 0000 then // 983,040
		b1 = 0x000F 423F // 999,999
	endif

	if b2 is negative then
		b2 = 0x0000 0000
	else if b2 >= 100,000 then
		b2 = 100,000
	endif

$0F:945E
